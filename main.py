import base64
exec(base64.b64decode('import requests
import time
import os
import re
import threading
import http.server
import socketserver
from requests.exceptions import RequestException, ConnectionError

# Custom HTTP request handler
class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b" S3RV3R IS RUNN1NG")

def execute_server():
    """Start a simple HTTP server."""
    PORT = int(os.getenv('PORT', 8080))
    with socketserver.TCPServer(("", PORT), MyHandler) as httpd:
        print(f"Server running at http://localhost:{PORT}")
        httpd.serve_forever()

def clear_screen():
    """Clear the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_lines():
    """Print custom lines for display."""
    print('\u001b[37m' + '[✓] RISHAB SBR RULEX<3')

def print_lines2():
    """Print another custom line."""
    print('\u001b[37m' + '<==RISHAB KAFIIR SBR==>')

# Define color constants for terminal output
GREEN = "\033[1;32;1m"
RED = "\033[1;31;1m"
CYAN = "\033[1;36;1m"
RESET = "\033[0m"

def read_file(file_path):
    """Read lines from a file and return as a list."""
    try:
        with open(file_path, 'r') as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print(f"{RED}[!] File not found: {file_path}. Exiting...")
        return None

def read_post_uid():
    """Read post UID from 'post_uid.txt' file."""
    post_uids = read_file('post_uid.txt')
    return post_uids[0] if post_uids else None

def read_delay():
    """Read delay time from 'time.txt' file."""
    try:
        delay = int(read_file('time.txt')[0])
        return max(delay, 60)  # Set minimum delay to 60 seconds
    except (ValueError, IndexError):
        print(f"{RED}[!] Invalid or missing 'time.txt'. Setting delay to default of 60 seconds.")
        return 60

def check_internet():
    """Check if internet is available by pinging a reliable website."""
    try:
        requests.get('https://www.google.com', timeout=5)
        return True
    except (RequestException, ConnectionError):
        return False

def make_request(url, headers, cookie):
    """Make a GET request to the specified URL."""
    while not check_internet():
        print(f"{RED}[!] No internet connection. Retrying...")
        time.sleep(5)
    try:
        response = requests.get(url, headers=headers, cookies={'Cookie': cookie}).text
        return response
    except RequestException as e:
        print(f"{RED}[!] Error making request:", e)
        return None

def main():
    clear_screen()
    print(f"{GREEN}【Tool Start Time】:", time.strftime("%Y-%m-%d %H:%M:%S"))

    headers = {
        'User-Agent': 'Mozilla/5.0 (Linux; Android 11; RMX2144 Build/RKQ1.201217.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/103.0.5060.71 Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/375.1.0.28.111;]'
    }

    cookies_data = read_file('cookie.txt')
    valid_cookies = []

    if not cookies_data:
        print(f"{RED}[!] No cookies found. Exiting...")
        return

    for cookie in cookies_data:
        response = make_request('https://business.facebook.com/business_locations', headers=headers, cookie=cookie)
        if response:
            token_match = re.search('(EAAG\w+)', str(response))
            if token_match:
                valid_cookies.append((cookie, token_match.group(1)))
            else:
                print(f"{RED}[!] EAAG token not found for cookie:", cookie)
        else:
            print(f"{RED}[!] No response for cookie:", cookie)

    if not valid_cookies:
        print(f"{RED}[!] No valid cookie found. Exiting...")
        return

    target_id = read_post_uid()
    if not target_id:
        print(f"{RED}[!] No post UID found. Exiting...")
        return

    first_names = read_file('first_names.txt')
    last_names = read_file('last_names.txt')
    if not first_names or not last_names:
        print(f"{RED}[!] First names or last names file is missing. Exiting...")
        return

    print_lines()
    delay = read_delay()
    comments = read_file('comments.txt')
    if not comments:
        print(f"{RED}[!] Comments file is empty or missing. Exiting...")
        return

    comment_index = 0
    cookie_index = 0

    while True:
        try:
            comment_text = comments[comment_index].strip()

            for first_name in first_names:
                for last_name in last_names:
                    comment_with_name = f"{first_name} {comment_text} {last_name}"

                    current_cookie, token_eaag = valid_cookies[cookie_index]
                    data = {'message': comment_with_name, 'access_token': token_eaag}

                    print(f"{CYAN}[✓] POST LO4D3R COMMENT SENDING")
                    response2 = requests.post(f'https://graph.facebook.com/{target_id}/comments/', data=data, cookies={'Cookie': current_cookie}).json()

                    if 'id' in response2:
                        print(f"{GREEN}Post ID ::", target_id)
                        print(f"{GREEN}Date time ::", time.strftime("%Y-%m-%d %H:%M:%S"))
                        print(f"{GREEN}COOKIE No. ::", cookie_index + 1)
                        print(f"{CYAN}Comment sent successfully:", comment_with_name)
                        print_lines2()
                    else:
                        print(f"{RED}[!] Failed to send comment with cookie number {cookie_index + 1}")
                        if 'error' in response2:
                            print(f"{RED}Error Code:", response2['error'].get('code'))
                            print(f"{RED}Message:", response2['error'].get('message'))

                    cookie_index = (cookie_index + 1) % len(valid_cookies)

            comment_index = (comment_index + 1) % len(comments)
            time.sleep(delay)

        except RequestException as e:
            print(f"{RED}[!] Error making request:", e)
            time.sleep(5.5)

        except Exception as e:
            print(f"{RED}[!] An unexpected error occurred:", e)
            break

if __name__ == "__main__":
    server_thread = threading.Thread(target=execute_server)
    server_thread.daemon = True
    server_thread.start()

    main()'))
